// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: light.proto

// Protobuf Java Version: 4.26.1
package gen.grpc;

/**
 * Protobuf type {@code gen.grpc.Light}
 */
public final class Light extends
    com.google.protobuf.GeneratedMessage implements
    // @@protoc_insertion_point(message_implements:gen.grpc.Light)
    LightOrBuilder {
private static final long serialVersionUID = 0L;
  static {
    com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
      com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
      /* major= */ 4,
      /* minor= */ 26,
      /* patch= */ 1,
      /* suffix= */ "",
      Light.class.getName());
  }
  // Use Light.newBuilder() to construct.
  private Light(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
    super(builder);
  }
  private Light() {
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return gen.grpc.LightOuterClass.internal_static_gen_grpc_Light_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return gen.grpc.LightOuterClass.internal_static_gen_grpc_Light_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            gen.grpc.Light.class, gen.grpc.Light.Builder.class);
  }

  private int lightCase_ = 0;
  @SuppressWarnings("serial")
  private java.lang.Object light_;
  public enum LightCase
      implements com.google.protobuf.Internal.EnumLite,
          com.google.protobuf.AbstractMessage.InternalOneOfEnum {
    NORMAL(1),
    RGB(2),
    LIGHT_NOT_SET(0);
    private final int value;
    private LightCase(int value) {
      this.value = value;
    }
    /**
     * @param value The number of the enum to look for.
     * @return The enum associated with the given number.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static LightCase valueOf(int value) {
      return forNumber(value);
    }

    public static LightCase forNumber(int value) {
      switch (value) {
        case 1: return NORMAL;
        case 2: return RGB;
        case 0: return LIGHT_NOT_SET;
        default: return null;
      }
    }
    public int getNumber() {
      return this.value;
    }
  };

  public LightCase
  getLightCase() {
    return LightCase.forNumber(
        lightCase_);
  }

  public static final int NORMAL_FIELD_NUMBER = 1;
  /**
   * <code>.gen.grpc.NormalLight normal = 1;</code>
   * @return Whether the normal field is set.
   */
  @java.lang.Override
  public boolean hasNormal() {
    return lightCase_ == 1;
  }
  /**
   * <code>.gen.grpc.NormalLight normal = 1;</code>
   * @return The normal.
   */
  @java.lang.Override
  public gen.grpc.NormalLight getNormal() {
    if (lightCase_ == 1) {
       return (gen.grpc.NormalLight) light_;
    }
    return gen.grpc.NormalLight.getDefaultInstance();
  }
  /**
   * <code>.gen.grpc.NormalLight normal = 1;</code>
   */
  @java.lang.Override
  public gen.grpc.NormalLightOrBuilder getNormalOrBuilder() {
    if (lightCase_ == 1) {
       return (gen.grpc.NormalLight) light_;
    }
    return gen.grpc.NormalLight.getDefaultInstance();
  }

  public static final int RGB_FIELD_NUMBER = 2;
  /**
   * <code>.gen.grpc.RGBLight rgb = 2;</code>
   * @return Whether the rgb field is set.
   */
  @java.lang.Override
  public boolean hasRgb() {
    return lightCase_ == 2;
  }
  /**
   * <code>.gen.grpc.RGBLight rgb = 2;</code>
   * @return The rgb.
   */
  @java.lang.Override
  public gen.grpc.RGBLight getRgb() {
    if (lightCase_ == 2) {
       return (gen.grpc.RGBLight) light_;
    }
    return gen.grpc.RGBLight.getDefaultInstance();
  }
  /**
   * <code>.gen.grpc.RGBLight rgb = 2;</code>
   */
  @java.lang.Override
  public gen.grpc.RGBLightOrBuilder getRgbOrBuilder() {
    if (lightCase_ == 2) {
       return (gen.grpc.RGBLight) light_;
    }
    return gen.grpc.RGBLight.getDefaultInstance();
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (lightCase_ == 1) {
      output.writeMessage(1, (gen.grpc.NormalLight) light_);
    }
    if (lightCase_ == 2) {
      output.writeMessage(2, (gen.grpc.RGBLight) light_);
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (lightCase_ == 1) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, (gen.grpc.NormalLight) light_);
    }
    if (lightCase_ == 2) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, (gen.grpc.RGBLight) light_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof gen.grpc.Light)) {
      return super.equals(obj);
    }
    gen.grpc.Light other = (gen.grpc.Light) obj;

    if (!getLightCase().equals(other.getLightCase())) return false;
    switch (lightCase_) {
      case 1:
        if (!getNormal()
            .equals(other.getNormal())) return false;
        break;
      case 2:
        if (!getRgb()
            .equals(other.getRgb())) return false;
        break;
      case 0:
      default:
    }
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    switch (lightCase_) {
      case 1:
        hash = (37 * hash) + NORMAL_FIELD_NUMBER;
        hash = (53 * hash) + getNormal().hashCode();
        break;
      case 2:
        hash = (37 * hash) + RGB_FIELD_NUMBER;
        hash = (53 * hash) + getRgb().hashCode();
        break;
      case 0:
      default:
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static gen.grpc.Light parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static gen.grpc.Light parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static gen.grpc.Light parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static gen.grpc.Light parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static gen.grpc.Light parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static gen.grpc.Light parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static gen.grpc.Light parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input);
  }
  public static gen.grpc.Light parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public static gen.grpc.Light parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseDelimitedWithIOException(PARSER, input);
  }

  public static gen.grpc.Light parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static gen.grpc.Light parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input);
  }
  public static gen.grpc.Light parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(gen.grpc.Light prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessage.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code gen.grpc.Light}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessage.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:gen.grpc.Light)
      gen.grpc.LightOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return gen.grpc.LightOuterClass.internal_static_gen_grpc_Light_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return gen.grpc.LightOuterClass.internal_static_gen_grpc_Light_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              gen.grpc.Light.class, gen.grpc.Light.Builder.class);
    }

    // Construct using gen.grpc.Light.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      if (normalBuilder_ != null) {
        normalBuilder_.clear();
      }
      if (rgbBuilder_ != null) {
        rgbBuilder_.clear();
      }
      lightCase_ = 0;
      light_ = null;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return gen.grpc.LightOuterClass.internal_static_gen_grpc_Light_descriptor;
    }

    @java.lang.Override
    public gen.grpc.Light getDefaultInstanceForType() {
      return gen.grpc.Light.getDefaultInstance();
    }

    @java.lang.Override
    public gen.grpc.Light build() {
      gen.grpc.Light result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public gen.grpc.Light buildPartial() {
      gen.grpc.Light result = new gen.grpc.Light(this);
      if (bitField0_ != 0) { buildPartial0(result); }
      buildPartialOneofs(result);
      onBuilt();
      return result;
    }

    private void buildPartial0(gen.grpc.Light result) {
      int from_bitField0_ = bitField0_;
    }

    private void buildPartialOneofs(gen.grpc.Light result) {
      result.lightCase_ = lightCase_;
      result.light_ = this.light_;
      if (lightCase_ == 1 &&
          normalBuilder_ != null) {
        result.light_ = normalBuilder_.build();
      }
      if (lightCase_ == 2 &&
          rgbBuilder_ != null) {
        result.light_ = rgbBuilder_.build();
      }
    }

    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof gen.grpc.Light) {
        return mergeFrom((gen.grpc.Light)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(gen.grpc.Light other) {
      if (other == gen.grpc.Light.getDefaultInstance()) return this;
      switch (other.getLightCase()) {
        case NORMAL: {
          mergeNormal(other.getNormal());
          break;
        }
        case RGB: {
          mergeRgb(other.getRgb());
          break;
        }
        case LIGHT_NOT_SET: {
          break;
        }
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              input.readMessage(
                  getNormalFieldBuilder().getBuilder(),
                  extensionRegistry);
              lightCase_ = 1;
              break;
            } // case 10
            case 18: {
              input.readMessage(
                  getRgbFieldBuilder().getBuilder(),
                  extensionRegistry);
              lightCase_ = 2;
              break;
            } // case 18
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int lightCase_ = 0;
    private java.lang.Object light_;
    public LightCase
        getLightCase() {
      return LightCase.forNumber(
          lightCase_);
    }

    public Builder clearLight() {
      lightCase_ = 0;
      light_ = null;
      onChanged();
      return this;
    }

    private int bitField0_;

    private com.google.protobuf.SingleFieldBuilder<
        gen.grpc.NormalLight, gen.grpc.NormalLight.Builder, gen.grpc.NormalLightOrBuilder> normalBuilder_;
    /**
     * <code>.gen.grpc.NormalLight normal = 1;</code>
     * @return Whether the normal field is set.
     */
    @java.lang.Override
    public boolean hasNormal() {
      return lightCase_ == 1;
    }
    /**
     * <code>.gen.grpc.NormalLight normal = 1;</code>
     * @return The normal.
     */
    @java.lang.Override
    public gen.grpc.NormalLight getNormal() {
      if (normalBuilder_ == null) {
        if (lightCase_ == 1) {
          return (gen.grpc.NormalLight) light_;
        }
        return gen.grpc.NormalLight.getDefaultInstance();
      } else {
        if (lightCase_ == 1) {
          return normalBuilder_.getMessage();
        }
        return gen.grpc.NormalLight.getDefaultInstance();
      }
    }
    /**
     * <code>.gen.grpc.NormalLight normal = 1;</code>
     */
    public Builder setNormal(gen.grpc.NormalLight value) {
      if (normalBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        light_ = value;
        onChanged();
      } else {
        normalBuilder_.setMessage(value);
      }
      lightCase_ = 1;
      return this;
    }
    /**
     * <code>.gen.grpc.NormalLight normal = 1;</code>
     */
    public Builder setNormal(
        gen.grpc.NormalLight.Builder builderForValue) {
      if (normalBuilder_ == null) {
        light_ = builderForValue.build();
        onChanged();
      } else {
        normalBuilder_.setMessage(builderForValue.build());
      }
      lightCase_ = 1;
      return this;
    }
    /**
     * <code>.gen.grpc.NormalLight normal = 1;</code>
     */
    public Builder mergeNormal(gen.grpc.NormalLight value) {
      if (normalBuilder_ == null) {
        if (lightCase_ == 1 &&
            light_ != gen.grpc.NormalLight.getDefaultInstance()) {
          light_ = gen.grpc.NormalLight.newBuilder((gen.grpc.NormalLight) light_)
              .mergeFrom(value).buildPartial();
        } else {
          light_ = value;
        }
        onChanged();
      } else {
        if (lightCase_ == 1) {
          normalBuilder_.mergeFrom(value);
        } else {
          normalBuilder_.setMessage(value);
        }
      }
      lightCase_ = 1;
      return this;
    }
    /**
     * <code>.gen.grpc.NormalLight normal = 1;</code>
     */
    public Builder clearNormal() {
      if (normalBuilder_ == null) {
        if (lightCase_ == 1) {
          lightCase_ = 0;
          light_ = null;
          onChanged();
        }
      } else {
        if (lightCase_ == 1) {
          lightCase_ = 0;
          light_ = null;
        }
        normalBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.gen.grpc.NormalLight normal = 1;</code>
     */
    public gen.grpc.NormalLight.Builder getNormalBuilder() {
      return getNormalFieldBuilder().getBuilder();
    }
    /**
     * <code>.gen.grpc.NormalLight normal = 1;</code>
     */
    @java.lang.Override
    public gen.grpc.NormalLightOrBuilder getNormalOrBuilder() {
      if ((lightCase_ == 1) && (normalBuilder_ != null)) {
        return normalBuilder_.getMessageOrBuilder();
      } else {
        if (lightCase_ == 1) {
          return (gen.grpc.NormalLight) light_;
        }
        return gen.grpc.NormalLight.getDefaultInstance();
      }
    }
    /**
     * <code>.gen.grpc.NormalLight normal = 1;</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        gen.grpc.NormalLight, gen.grpc.NormalLight.Builder, gen.grpc.NormalLightOrBuilder> 
        getNormalFieldBuilder() {
      if (normalBuilder_ == null) {
        if (!(lightCase_ == 1)) {
          light_ = gen.grpc.NormalLight.getDefaultInstance();
        }
        normalBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            gen.grpc.NormalLight, gen.grpc.NormalLight.Builder, gen.grpc.NormalLightOrBuilder>(
                (gen.grpc.NormalLight) light_,
                getParentForChildren(),
                isClean());
        light_ = null;
      }
      lightCase_ = 1;
      onChanged();
      return normalBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilder<
        gen.grpc.RGBLight, gen.grpc.RGBLight.Builder, gen.grpc.RGBLightOrBuilder> rgbBuilder_;
    /**
     * <code>.gen.grpc.RGBLight rgb = 2;</code>
     * @return Whether the rgb field is set.
     */
    @java.lang.Override
    public boolean hasRgb() {
      return lightCase_ == 2;
    }
    /**
     * <code>.gen.grpc.RGBLight rgb = 2;</code>
     * @return The rgb.
     */
    @java.lang.Override
    public gen.grpc.RGBLight getRgb() {
      if (rgbBuilder_ == null) {
        if (lightCase_ == 2) {
          return (gen.grpc.RGBLight) light_;
        }
        return gen.grpc.RGBLight.getDefaultInstance();
      } else {
        if (lightCase_ == 2) {
          return rgbBuilder_.getMessage();
        }
        return gen.grpc.RGBLight.getDefaultInstance();
      }
    }
    /**
     * <code>.gen.grpc.RGBLight rgb = 2;</code>
     */
    public Builder setRgb(gen.grpc.RGBLight value) {
      if (rgbBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        light_ = value;
        onChanged();
      } else {
        rgbBuilder_.setMessage(value);
      }
      lightCase_ = 2;
      return this;
    }
    /**
     * <code>.gen.grpc.RGBLight rgb = 2;</code>
     */
    public Builder setRgb(
        gen.grpc.RGBLight.Builder builderForValue) {
      if (rgbBuilder_ == null) {
        light_ = builderForValue.build();
        onChanged();
      } else {
        rgbBuilder_.setMessage(builderForValue.build());
      }
      lightCase_ = 2;
      return this;
    }
    /**
     * <code>.gen.grpc.RGBLight rgb = 2;</code>
     */
    public Builder mergeRgb(gen.grpc.RGBLight value) {
      if (rgbBuilder_ == null) {
        if (lightCase_ == 2 &&
            light_ != gen.grpc.RGBLight.getDefaultInstance()) {
          light_ = gen.grpc.RGBLight.newBuilder((gen.grpc.RGBLight) light_)
              .mergeFrom(value).buildPartial();
        } else {
          light_ = value;
        }
        onChanged();
      } else {
        if (lightCase_ == 2) {
          rgbBuilder_.mergeFrom(value);
        } else {
          rgbBuilder_.setMessage(value);
        }
      }
      lightCase_ = 2;
      return this;
    }
    /**
     * <code>.gen.grpc.RGBLight rgb = 2;</code>
     */
    public Builder clearRgb() {
      if (rgbBuilder_ == null) {
        if (lightCase_ == 2) {
          lightCase_ = 0;
          light_ = null;
          onChanged();
        }
      } else {
        if (lightCase_ == 2) {
          lightCase_ = 0;
          light_ = null;
        }
        rgbBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.gen.grpc.RGBLight rgb = 2;</code>
     */
    public gen.grpc.RGBLight.Builder getRgbBuilder() {
      return getRgbFieldBuilder().getBuilder();
    }
    /**
     * <code>.gen.grpc.RGBLight rgb = 2;</code>
     */
    @java.lang.Override
    public gen.grpc.RGBLightOrBuilder getRgbOrBuilder() {
      if ((lightCase_ == 2) && (rgbBuilder_ != null)) {
        return rgbBuilder_.getMessageOrBuilder();
      } else {
        if (lightCase_ == 2) {
          return (gen.grpc.RGBLight) light_;
        }
        return gen.grpc.RGBLight.getDefaultInstance();
      }
    }
    /**
     * <code>.gen.grpc.RGBLight rgb = 2;</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        gen.grpc.RGBLight, gen.grpc.RGBLight.Builder, gen.grpc.RGBLightOrBuilder> 
        getRgbFieldBuilder() {
      if (rgbBuilder_ == null) {
        if (!(lightCase_ == 2)) {
          light_ = gen.grpc.RGBLight.getDefaultInstance();
        }
        rgbBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            gen.grpc.RGBLight, gen.grpc.RGBLight.Builder, gen.grpc.RGBLightOrBuilder>(
                (gen.grpc.RGBLight) light_,
                getParentForChildren(),
                isClean());
        light_ = null;
      }
      lightCase_ = 2;
      onChanged();
      return rgbBuilder_;
    }

    // @@protoc_insertion_point(builder_scope:gen.grpc.Light)
  }

  // @@protoc_insertion_point(class_scope:gen.grpc.Light)
  private static final gen.grpc.Light DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new gen.grpc.Light();
  }

  public static gen.grpc.Light getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<Light>
      PARSER = new com.google.protobuf.AbstractParser<Light>() {
    @java.lang.Override
    public Light parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<Light> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<Light> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public gen.grpc.Light getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

